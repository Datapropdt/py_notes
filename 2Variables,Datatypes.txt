Variables:
These are reserved memory locations to store values.

var = 1000

Example:
#!/usr/bin/python3
a = 100 # An integer assignment
b = 1000.0 # A floating point
c = "Datapro" # A string name
print (a)
print (b)
print (c)

O/p:

Multiple Assignment:

We can assign a single value to several variables simultaneously.

Syntax:
a = b = c = 1

Example:
a, b, c = 1, 2.5, "Datapro"
O/P:

---------------------------------------------
Data Types:

Five standard data types-

1.Numbers
2.String
3.List
4.Tuple
5.Dictionary

---------------------------------------------

Numbers: Number data types store numeric values.
Syntax:
var1 = 1
var2 = 10

Python supports three different numerical types −
int (signed integers)
float (floating point real values)
complex (complex numbers)

Example:

a = 100
print(a);
o/p: 

delete : delete to arg/variables
keyword: del

Example:
del a

O/p:

Number ranges:
int 	float 		complex
10 	0.0 		3.14j
100 	15.20 		45.j
-786 	-21.9 		9.322e-36j
080 	32.3+e18 		.876j
-0490 	-90. 		-.6545+0J
-0x260 	-32.54e100 		3e+26J
0x69 	70.2-E12 		4.53e-7j

---------------------------------------------

Strings:
Strings in Python are identified as a contiguous set of characters represented in the quotation marks.
*Slice Operator ([] & [:])
*string concatenation operator(+)
*repetition operator (*)

Example:
#!/usr/bin/python3
str = 'Hello World!'
print (str) # Prints complete string
print (str[0]) # Prints first character of the string
print (str[2:5]) # Prints characters starting from 3rd to 5th
print (str[2:]) # Prints string starting from 3rd character
print (str * 2) # Prints string two times
print (str + "TEST") # Prints concatenated string

o/p:

---------------------------------------------

Python Lists:
Lists are compound data types. A list contains items
separated by commas and enclosed within square brackets ([]).

Example:
#!/usr/bin/python3
list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
tinylist = [123, 'Datapro']
print (list) # Prints complete list
print (list[0]) # Prints first element of the list
print (list[1:3]) # Prints elements starting from 2nd till 3rd
print (list[2:]) # Prints elements starting from 3rd element
print (tinylist * 2) # Prints list two times
print (list + tinylist) # Prints concatenated lists
 
o/p:

---------------------------------------------
Python Tuples:
A tuple is another sequence data type that is similar to the list.A tuple is an immutable object, which means it cannot be changed, and we use it to represent fixed collections of items. A tuple consists of a number of values separated by commas.

*Tuples are enclosed within parenthesis. ()

Example:
#!/usr/bin/python3
tuple = ( 'abcd', 786 , 2.23, 'john', 70.2 )
tinytuple = (123, 'john')
print (tuple) # Prints complete tuple
print (tuple[0]) # Prints first element of the tuple
print (tuple[1:3]) # Prints elements starting from 2nd till 3rd
print (tuple[2:]) # Prints elements starting from 3rd element
print (tinytuple * 2) # Prints tuple two times
print (tuple + tinytuple) # Prints concatenated tuple

---------------------------------------------

Python Dictionary:
A dictionary key can be almost any
Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.

*Dictionaries are enclosed by braces ({ }).
*values can be assigned and accessed using square braces ([])

Example:
#!/usr/bin/python3
dict = {}
dict['one'] = "This is one"
dict[2] = "This is two"
tinydict = {'name': 'Datapro','code':6734, 'dept': 'sales'}
print (dict['one']) # Prints value for 'one' key
print (dict[2]) # Prints value for 2 key
print (tinydict) # Prints complete dictionary
print (tinydict.keys()) # Prints all the keys
print (tinydict.values()) # Prints all the values

O/p:

---------------------------------------------
Data Type Conversion:
To perform conversions between the built-in types, we use the type-name as a function.

Function Description
int(x [,base]) :Converts x to an integer. The base specifies the base if x is a string.
float(x) :Converts x to a floating-point number.
complex(real[,imag]) :Creates a complex number.
str(x) :Converts object x to a string representation.
repr(x) :Converts object x to an expression string.
eval(str) :Evaluates a string and returns an object.
tuple(s) :Converts s to a tuple.
list(s) :Converts s to a list.
set(s) :Converts s to a set.
dict(d) :Creates a dictionary. d must be a sequence of (key,value) tuples.
frozenset(s) :Converts s to a frozen set.
chr(x) :Converts an integer to a character.
unichr(x) :Converts an integer to a Unicode character.
ord(x) :Converts a single character to its integer value.
hex(x) :Converts an integer to a hexadecimal string.
oct(x) :Converts an integer to an octal string.
bin(x):Converts an integer to a binary string
